create or replace function roomTypeIncomeByState(resID number)
		return number
		AS
			total_room_type number;
		BEGIN
				select sum(total_price_of_room_res) into total_room_type
					from roomres 
						where resID = res_id;
					return total_room_type;
				exception
					when no_data_found
						then return 0;
		END;
	/*uses aggregate function to find the sum of room reservation according to res_id*/
	
create or replace function servicebyStateT( resID number)
        return number
                is
                total_service number;
     begin
                select sum(total_service_price) into total_service
                from services
                Where res_id = resid;
	/* places sum of total service price per service type into variable total_service*/

	return total_service;
     exception
            when no_data_found then 
            return 0;
    end;
	
	
	
create or replace function totalByState (e_state varchar)
        return number
        IS 
          eventTotal number;
          serviceTotal number;
          totalOfAll number;
discountTotal number;
        BEGIN
		select sum(discount) into discountTotal
			from roomres	
		where r_id IN (select r_id from room where hotel_id IN (select hotel_id from hotel where hotel_state = e_state));
				
/* uses subquery to make sure the room_id exists in a hotel that exists in inputted state*/

		select sum(total_price_of_room_res) into eventTotal
				from roomres
					where r_id IN (select r_id from room where hotel_id IN (select hotel_id from hotel where hotel_state = e_state));
					   
					   
           select sum(Total_service_price) into serviceTotal
				from services
					where res_id IN (select res_id from reservation where hotel_id IN (select hotel_id from hotel where hotel_state = e_state));
				    
				/*calculates total income from services for entire month and places it into serviceTotal variable*/
				
	if serviceTotal is null then
		serviceTotal := 0;
	end if;
				
	if discountTotal is null then
		discountTotal := 0;
	end if;
        
	totalOfAll := eventTotal + serviceTotal - discountTotal; 

/*sets variable totalOfAll = sum of eventTotal and serviceTotal*/
	
return totalOfAll;
/*returns number assigned to variable */
    exception
        when no_data_found then 
        return 0;
end;






create or replace function totalPerEventState  (resID number)
	return number
		as
				 total_service number;
				 total_room_type number;
				 discountTotal number;
				 totalIncomePerEvent number;
				 
     begin
	 
				select sum(total_service_price) into total_Service
					from services 
					where res_id = resID;
					
				select sum(total_price_of_room_res) into total_room_type
					from roomres
					where res_id = resID;
				
				select sum(discount) into discountTotal
					from roomres
					where res_id = resID;
					
					
		if total_service is null then
			total_service := 0;
		end if;
				
		if discountTotal is null then
			discountTotal := 0;
		end if;

		/*assigns value of zero to variables when no data is found*/
		
totalIncomePerEvent :=  total_service + total_room_type -discountTotal;

		return totalIncomePerEvent;
				
	exception
		when no_data_found then 
		return 0;
END;

create or replace FUNCTION discountByState ( resID number) 
		return number
	AS 
		discountTotal number;
	BEGIN
        		discountTotal := 0;
                select sum(discount) into discountTotal
				from roomres	
				where res_id = resID ;
		return discountTotal;
		/*returns sum found that placed into variable discountTotal*/
	EXCEPTION	
			when no_data_found then 
				return 0;
	END;
	
	
		
CREATE OR REPLACE PROCEDURE IncomeByState (e_state varchar)
AS
	CURSOR C1 IS 
		SELECT res_id, roomtype
			from roomres where
				 r_id IN (select r_id from room where hotel_id IN (select hotel_id from hotel where hotel_state IN e_state));

/*uses subquery to find a res_id that has a reservation whos room_id is located in a hotel that is located in the entered state*/

		foundReservation number;
		roomtypeFound room.r_type%type;
		reservationTotal number;
		serviceTotal number;
		discount number;
		totalIncome number;
		totalfromevent number;
        resCount number;
        noReservations exception;
	BEGIN	
        select count(r.res_id) into resCount 
            from reservation r, hotel h
            where r.hotel_id = h.hotel_id and h.hotel_state = e_state;
                
        if rescount = 0 
            then raise noReservations;
                    /*if no reservationIDs are found in the state, then exception is raised. If reservations found then cursor is open and fetched*/
	else
            	open c1;
            	loop
			fetch c1 into foundReservation, roomtypeFound;
					exit when c1%notfound;
					
	reservationTotal := roomTypeIncomeByState(foundReservation);
	serviceTotal := servicebyStateT  (foundReservation);
	discount := discountByState (foundReservation);
	totalFromEvent := totalPerEventState(foundReservation);

/*uses the reservation ID found by the cursor as parameters for functions. Assigns result of the functions to appropriate declared variable. These ResIDs exist in entered state*/
                            
dbms_output.put_line ('Reservation ID: ' || foundReservation);
	dbms_output.put_line('	Total from services: $' || serviceTotal);
	dbms_output.put_line('	Total from room reservation: $' || reservationTotal);
	dbms_output.put_line('	Total from discounts: -$' || discount );
            dbms_output.put_line(' ---------------------------------------------');
	dbms_output.put_line(	'Total Income from event: $' || totalfromevent )
                       dbms_output.put_line('_______________________________________________');

end loop; /*once a reservation id is found, the above statements are performed again and again until cursor finds no more reservation ids*/

close c1;
        		totalIncome := totalByState (e_state);
		/*prints out total income by state*/
       end if;
		dbms_output.put_line ('Total Income in ' || e_state || ' : $' || totalIncome );
    
        EXCEPTION
            When noReservations then dbms_output.put_line('No Reservations in this state');
	END;

